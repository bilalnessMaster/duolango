// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  isSubscribed  Boolean?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  progress      Progress[]
  lesson        LessonProgress[]
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  @@map("verification")
}

enum State {
  completed 
  in_progress
  not_started
}

model Course {
  id        String    @id
  title     String
  imageSrc  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  units     Unit[]
  progress  Progress[]
}

model Unit {
  id        String    @id
  title     String
  courseId  String
  course    Course    @relation(fields : [courseId], references : [id], onDelete : Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  lessons   Lesson[]
  
}

model Lesson {
  id              String    @id
  title           String
  unitId          String
  unit            Unit      @relation(fields : [unitId], references : [id], onDelete : Cascade)
  order           Int     
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  question        Question[]
  lessionProgress LessonProgress[]
}

model Question {
  id        String    @id
  question  String
  lessonId  String
  lesson    Lesson    @relation(fields : [lessonId], references : [id], onDelete : Cascade)
  order     Int 
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  options   Option[]
}

model Option {
  id          String    @id
  imageSrc    String
  audioSrc    String
  questionId  String
  question    Question @relation(fields : [questionId], references : [id], onDelete : Cascade)
  order       Int   
  isCorrect   Boolean
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}


model Progress { 
  userId         String   @id
  userName       String   @default("User")
  userImageSrc   String   @default("/mascot.svg")
  activeCourseId String
  lessons        Int      @default(0)
  hearts         Int      @default(5)
  points         Int      @default(0)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [activeCourseId], references: [id])
  lastQuestionAnswered    Int @default(1)
  @@unique([userId, activeCourseId])

  @@map("progress")
}


model LessonProgress {
  id                   String   @id @default(uuid())
  userId               String
  lessonId             String
  lastQuestionAnswered Int     @default(0)
  completed            Boolean  @default(false)
  updatedAt            DateTime @updatedAt
  state                State    @default(not_started) 
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson  Lesson  @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

